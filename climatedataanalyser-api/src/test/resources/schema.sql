DROP SCHEMA IF EXISTS CLIMATE CASCADE;
CREATE SCHEMA CLIMATE;
SET SCHEMA CLIMATE;

-- ##########################
-- Drop Tables
-- ##########################
-- Clear all Tables
DROP TABLE IF EXISTS MONTH_ CASCADE;
DROP TABLE IF EXISTS CLIMATE CASCADE;
DROP TABLE IF EXISTS STATION CASCADE;
DROP TABLE IF EXISTS WEATHER CASCADE;
-- ##########################
-- Create Tables
-- ##########################
CREATE TABLE IF NOT EXISTS `MONTH_`
(
    MONTH_ID          BIGINT auto_increment NOT NULL PRIMARY KEY,
    STATIONS_ID       int                   NOT NULL,
    MESS_DATUM_BEGINN DATE                  NOT NULL,
    MESS_DATUM_ENDE   DATE                  NOT NULL,
    QN_4              int           DEFAULT NULL,
    MO_N              DECIMAL(7, 4) DEFAULT NULL,
    MO_TT             DECIMAL(7, 4) DEFAULT NULL,
    MO_TX             DECIMAL(7, 4) DEFAULT NULL,
    MO_TN             DECIMAL(7, 4) DEFAULT NULL,
    MO_FK             DECIMAL(7, 4) DEFAULT NULL,
    MX_TX             DECIMAL(7, 4) DEFAULT NULL,
    MX_FX             DECIMAL(7, 4) DEFAULT NULL,
    MX_TN             DECIMAL(7, 4) DEFAULT NULL,
    MO_SD_S           DECIMAL(7, 4) DEFAULT NULL,
    QN_6              int           DEFAULT NULL,
    MO_RR             DECIMAL(7, 4) DEFAULT NULL,
    MX_RS             DECIMAL(7, 4) DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS `STATION`
(
    ID           BIGINT auto_increment NOT NULL PRIMARY KEY,
    STATION_ID   int                   NOT NULL,
    DATE_BEGIN   DATE                  NOT NULL,
    DATE_END     DATE                  NOT NULL,
    STATION_HIGH DECIMAL(9, 3)         NOT NULL,
    GEO_LATITUDE DECIMAL(7, 4)         NOT NULL,
    GEO_LENGTH   DECIMAL(7, 4)         NOT NULL,
    STATION_NAME VARCHAR(100)          NOT NULL,
    BUNDES_LAND  VARCHAR(100)          NOT NULL

);

CREATE TABLE IF NOT EXISTS `WEATHER`
(
    WEATHER_ID              BIGINT auto_increment NOT NULL PRIMARY KEY,
    STATION_ID              int                   NOT NULL,
    YEAR_                   VARCHAR(4) COMMENT 'Weather Temperature for the year : yyyy',
    CALCULATED_ARTIFICIALLY BOOLEAN               Not Null Comment 'Marks a record as calculated and not as delivered',
    JANUAR                  DECIMAL(7, 4)         NOT NULL,
    FEBRUAR                 DECIMAL(7, 4)         NOT NULL,
    MAERZ                   DECIMAL(7, 4)         NOT NULL,
    APRIL                   DECIMAL(7, 4)         NOT NULL,
    MAI                     DECIMAL(7, 4)         NOT NULL,
    JUNI                    DECIMAL(7, 4)         NOT NULL,
    JULI                    DECIMAL(7, 4)         NOT NULL,
    AUGUST                  DECIMAL(7, 4)         NOT NULL,
    SEPTEMBER               DECIMAL(7, 4)         NOT NULL,
    OKTOBER                 DECIMAL(7, 4)         NOT NULL,
    NOVEMBER                DECIMAL(7, 4)         NOT NULL,
    DEZEMBER                DECIMAL(7, 4)         NOT NULL

);

CREATE TABLE IF NOT EXISTS `CLIMATE`
(
    CLIMATE_ID   BIGINT auto_increment NOT NULL PRIMARY KEY,
    STATION_ID   int                   NOT NULL,
    END_PERIOD   VARCHAR(4) COMMENT 'Climate Data end Period : yyyy  --> 2018 : for a 30 Year Climate Period !',
    START_PERIOD VARCHAR(4) COMMENT 'Climate Data start Period : yyyy  --> 1987',
    JANUAR       DECIMAL(7, 4)         NOT NULL,
    FEBRUAR      DECIMAL(7, 4)         NOT NULL,
    MAERZ        DECIMAL(7, 4)         NOT NULL,
    APRIL        DECIMAL(7, 4)         NOT NULL,
    MAI          DECIMAL(7, 4)         NOT NULL,
    JUNI         DECIMAL(7, 4)         NOT NULL,
    JULI         DECIMAL(7, 4)         NOT NULL,
    AUGUST       DECIMAL(7, 4)         NOT NULL,
    SEPTEMBER    DECIMAL(7, 4)         NOT NULL,
    OKTOBER      DECIMAL(7, 4)         NOT NULL,
    NOVEMBER     DECIMAL(7, 4)         NOT NULL,
    DEZEMBER     DECIMAL(7, 4)         NOT NULL

);

-- CREATE Spring Batch Tabels

DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_INSTANCE;

DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_SEQ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_SEQ;
DROP TABLE IF EXISTS BATCH_JOB_SEQ;

-- Autogenerated: do not edit this file

CREATE TABLE BATCH_JOB_INSTANCE
(
    JOB_INSTANCE_ID BIGINT       NOT NULL PRIMARY KEY,
    VERSION         BIGINT,
    JOB_NAME        VARCHAR(100) NOT NULL,
    JOB_KEY         VARCHAR(32)  NOT NULL
);

CREATE TABLE BATCH_JOB_EXECUTION
(
    JOB_EXECUTION_ID           BIGINT        NOT NULL PRIMARY KEY,
    VERSION                    BIGINT,
    JOB_INSTANCE_ID            BIGINT        NOT NULL,
    CREATE_TIME                DATETIME      NOT NULL,
    START_TIME                 DATETIME DEFAULT NULL,
    END_TIME                   DATETIME DEFAULT NULL,
    STATUS                     VARCHAR(10),
    EXIT_CODE                  VARCHAR(2500),
    EXIT_MESSAGE               VARCHAR(2500),
    LAST_UPDATED               DATETIME,
    JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL
);

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS
(
    JOB_EXECUTION_ID BIGINT       NOT NULL,
    TYPE_CD          VARCHAR(6)   NOT NULL,
    KEY_NAME         VARCHAR(100) NOT NULL,
    STRING_VAL       VARCHAR(250),
    DATE_VAL         DATETIME DEFAULT NULL,
    LONG_VAL         BIGINT,
    DOUBLE_VAL       DOUBLE PRECISION,
    IDENTIFYING      CHAR(1)      NOT NULL
);

CREATE TABLE BATCH_STEP_EXECUTION
(
    STEP_EXECUTION_ID  BIGINT       NOT NULL PRIMARY KEY,
    VERSION            BIGINT       NOT NULL,
    STEP_NAME          VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID   BIGINT       NOT NULL,
    START_TIME         DATETIME     NOT NULL,
    END_TIME           DATETIME DEFAULT NULL,
    STATUS             VARCHAR(10),
    COMMIT_COUNT       BIGINT,
    READ_COUNT         BIGINT,
    FILTER_COUNT       BIGINT,
    WRITE_COUNT        BIGINT,
    READ_SKIP_COUNT    BIGINT,
    WRITE_SKIP_COUNT   BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT     BIGINT,
    EXIT_CODE          VARCHAR(2500),
    EXIT_MESSAGE       VARCHAR(2500),
    LAST_UPDATED       DATETIME
);


CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT
(
    STEP_EXECUTION_ID  BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT
);

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT
(
    JOB_EXECUTION_ID   BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT
);

CREATE TABLE BATCH_STEP_EXECUTION_SEQ
(
    ID         BIGINT  NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL
);

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY)
select *
from (select 0 as ID, '0' as UNIQUE_KEY) as tmp
where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ
(
    ID         BIGINT  NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL
);

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY)
select *
from (select 0 as ID, '0' as UNIQUE_KEY) as tmp
where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ
(
    ID         BIGINT  NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL
);

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY)
select *
from (select 0 as ID, '0' as UNIQUE_KEY) as tmp
where not exists(select * from BATCH_JOB_SEQ);
